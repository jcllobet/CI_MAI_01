% Neural Networks Class Guide

%% Define the neuron parameters
% Neuron weights
w = [4 -2];
% Neuron bias
b = -3;
% Activation function: Hyperbolic tangent sigmoid function
func = 'tansig';
% Activation function: Logistic sigmoid transfer function
% func = 'logsig'
% Activation function: Hard-limit transfer function (threshold)
% func = 'hardlim'
% Activation function: Linear transfer function
% func = 'purelin'

%% Define input vectors
p = [2 3]

%% Calculate neuron output
%nnd2n1; %undo comment to see the output

%% Create and view custom neural networks.

% Define sample data (i.e. inputs and outputs).
inputs = [1:6]; % input vector (6-dimensional pattern); i.e. 1 2 3 4 5 6
outputs = [7:12]; % corresponding target output vector; i.e. 7 8 9 10 11 12

% Define and custom the network
% create the network: 1 input, 2 layer (1 hidden layer and 1 output layer), feed-forward
network
net = network( ...
1,          ... % numInputs (number of inputs)
2,          ... % numLayers (number of layers)
[1; 0],     ... % biasConnect (numLayers-by-1 Boolean vector)
[1; 0],     ... % inputConnect (numLayers-by-numInputs Boolean matrix)
[0 0; 1 0], ... % layerConnect (numLayers-by-numLayers Boolean matrix); [a b; c d]
            ... % a: 1st-layer with itself, b: 2nd-layer with 1st-layer,
            ... % c: 1st-layer with 2nd-layer, d: 2nd-layer with itself
[0 1]       ... % outputConnect (1-by-numLayers Boolean vector)
);
% View network structure
%view(net);

% We can then see the properties of sub-objects as follows:
%   net.inputs{1}
%   net.layers{1}, net.layers{2}
%   net.biases{1}
%   net.inputWeights{1}, net.layerWeights{2}
%   net.outputs{2}

%% Define topology and transfer function
% number of hidden layer neurons
net.layers{1}.size = 5;
% hidden layer transfer function
net.layers{1}.transferFcn = 'logsig';
%view(net);

%% Configure the network
net = configure(net,inputs,outputs);
view(net);

%% Train net and calculate neuron output
% initial network response without training (the network is resimulated)
initial_output = net(inputs)